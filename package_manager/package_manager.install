<?php

/**
 * @file
 * Contains install and update functions for Package Manager.
 */

declare(strict_types = 1);

use Drupal\package_manager\ComposerInspector;
use Drupal\package_manager\Exception\StageFailureMarkerException;
use PhpTuf\ComposerStager\Infrastructure\Service\Finder\ExecutableFinderInterface;

/**
 * Implements hook_requirements().
 */
function package_manager_requirements(string $phase) {
  $requirements = [];
  // BEGIN: DELETE FROM CORE MERGE REQUEST
  if (!class_exists('\PhpTuf\ComposerStager\Domain\Core\Beginner\Beginner')) {
    $requirements['package_manager_composer_dependencies'] = [
      'title' => t('Missing dependency'),
      'description' => t('External dependencies for Package Manager are not available. Composer must be used to download the module with dependencies.'),
      'severity' => REQUIREMENT_ERROR,
    ];
  }
  // END: DELETE FROM CORE MERGE REQUEST
  // If we're able to check for the presence of the failure marker at all, do it
  // irrespective of the current run phase. If the failure marker is there, the
  // site is in an indeterminate state and should be restored from backup ASAP.
  $service_id = 'package_manager.failure_marker';
  if (\Drupal::hasService($service_id)) {
    try {
      \Drupal::service($service_id)->assertNotExists(NULL);
    }
    catch (StageFailureMarkerException $exception) {
      $requirements['package_manager_failure_marker'] = [
        'title' => t('Failed update detected'),
        'description' => $exception->getMessage(),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }

  if ($phase !== 'runtime') {
    return $requirements;
  }
  /** @var \PhpTuf\ComposerStager\Infrastructure\Service\Finder\ExecutableFinderInterface $executable_finder */
  $executable_finder = \Drupal::service(ExecutableFinderInterface::class);

  // Report the Composer version in use, as well as its path.
  $title = t('Composer version');
  try {
    $requirements['package_manager_composer'] = [
      'title' => $title,
      'description' => t('@version (<code>@path</code>)', [
        '@version' => \Drupal::service(ComposerInspector::class)->getVersion(),
        '@path' => $executable_finder->find('composer'),
      ]),
      'severity' => REQUIREMENT_INFO,
    ];
  }
  catch (\Throwable $e) {
    $requirements['package_manager_composer'] = [
      'title' => $title,
      'description' => t('Composer was not found. The error message was: @message', [
        '@message' => $e->getMessage(),
      ]),
      'severity' => REQUIREMENT_ERROR,
    ];
  }
  return $requirements;
}

// BEGIN: DELETE FROM CORE MERGE REQUEST

/**
 * Implements hook_update_last_removed().
 */
function package_manager_update_last_removed(): int {
  return 9001;
}

// END: DELETE FROM CORE MERGE REQUEST
